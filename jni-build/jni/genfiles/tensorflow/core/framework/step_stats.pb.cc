// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/step_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/step_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* AllocatorMemoryUsed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocatorMemoryUsed_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeExecStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeExecStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceStepStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceStepStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* StepStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StepStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/step_stats.proto");
  GOOGLE_CHECK(file != NULL);
  AllocatorMemoryUsed_descriptor_ = file->message_type(0);
  static const int AllocatorMemoryUsed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, allocator_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, peak_bytes_),
  };
  AllocatorMemoryUsed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocatorMemoryUsed_descriptor_,
      AllocatorMemoryUsed::default_instance_,
      AllocatorMemoryUsed_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllocatorMemoryUsed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocatorMemoryUsed, _is_default_instance_));
  NodeOutput_descriptor_ = file->message_type(1);
  static const int NodeOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, tensor_description_),
  };
  NodeOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeOutput_descriptor_,
      NodeOutput::default_instance_,
      NodeOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeOutput, _is_default_instance_));
  NodeExecStats_descriptor_ = file->message_type(2);
  static const int NodeExecStats_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, all_start_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, op_start_rel_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, op_end_rel_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, all_end_rel_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, timeline_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, scheduled_micros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, thread_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, referenced_tensor_),
  };
  NodeExecStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeExecStats_descriptor_,
      NodeExecStats::default_instance_,
      NodeExecStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeExecStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeExecStats, _is_default_instance_));
  DeviceStepStats_descriptor_ = file->message_type(3);
  static const int DeviceStepStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, node_stats_),
  };
  DeviceStepStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceStepStats_descriptor_,
      DeviceStepStats::default_instance_,
      DeviceStepStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceStepStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStepStats, _is_default_instance_));
  StepStats_descriptor_ = file->message_type(4);
  static const int StepStats_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepStats, dev_stats_),
  };
  StepStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StepStats_descriptor_,
      StepStats::default_instance_,
      StepStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(StepStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepStats, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StepStats, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocatorMemoryUsed_descriptor_, &AllocatorMemoryUsed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeOutput_descriptor_, &NodeOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeExecStats_descriptor_, &NodeExecStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceStepStats_descriptor_, &DeviceStepStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StepStats_descriptor_, &StepStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto() {
  delete AllocatorMemoryUsed::default_instance_;
  delete AllocatorMemoryUsed_reflection_;
  delete NodeOutput::default_instance_;
  delete NodeOutput_reflection_;
  delete NodeExecStats::default_instance_;
  delete NodeExecStats_reflection_;
  delete DeviceStepStats::default_instance_;
  delete DeviceStepStats_reflection_;
  delete StepStats::default_instance_;
  delete StepStats_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto();
  ::tensorflow::protobuf_AddDesc_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*tensorflow/core/framework/step_stats.p"
    "roto\022\ntensorflow\0326tensorflow/core/framew"
    "ork/allocation_description.proto\0322tensor"
    "flow/core/framework/tensor_description.p"
    "roto\"V\n\023AllocatorMemoryUsed\022\026\n\016allocator"
    "_name\030\001 \001(\t\022\023\n\013total_bytes\030\002 \001(\003\022\022\n\npeak"
    "_bytes\030\003 \001(\003\"U\n\nNodeOutput\022\014\n\004slot\030\001 \001(\005"
    "\0229\n\022tensor_description\030\003 \001(\0132\035.tensorflo"
    "w.TensorDescription\"\354\002\n\rNodeExecStats\022\021\n"
    "\tnode_name\030\001 \001(\t\022\030\n\020all_start_micros\030\002 \001"
    "(\003\022\033\n\023op_start_rel_micros\030\003 \001(\003\022\031\n\021op_en"
    "d_rel_micros\030\004 \001(\003\022\032\n\022all_end_rel_micros"
    "\030\005 \001(\003\022/\n\006memory\030\006 \003(\0132\037.tensorflow.Allo"
    "catorMemoryUsed\022&\n\006output\030\007 \003(\0132\026.tensor"
    "flow.NodeOutput\022\026\n\016timeline_label\030\010 \001(\t\022"
    "\030\n\020scheduled_micros\030\t \001(\003\022\021\n\tthread_id\030\n"
    " \001(\r\022<\n\021referenced_tensor\030\013 \003(\0132!.tensor"
    "flow.AllocationDescription\"P\n\017DeviceStep"
    "Stats\022\016\n\006device\030\001 \001(\t\022-\n\nnode_stats\030\002 \003("
    "\0132\031.tensorflow.NodeExecStats\";\n\tStepStat"
    "s\022.\n\tdev_stats\030\001 \003(\0132\033.tensorflow.Device"
    "StepStatsB0\n\030org.tensorflow.frameworkB\017S"
    "tepStatsProtosP\001\370\001\001b\006proto3", 907);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/step_stats.proto", &protobuf_RegisterTypes);
  AllocatorMemoryUsed::default_instance_ = new AllocatorMemoryUsed();
  NodeOutput::default_instance_ = new NodeOutput();
  NodeExecStats::default_instance_ = new NodeExecStats();
  DeviceStepStats::default_instance_ = new DeviceStepStats();
  StepStats::default_instance_ = new StepStats();
  AllocatorMemoryUsed::default_instance_->InitAsDefaultInstance();
  NodeOutput::default_instance_->InitAsDefaultInstance();
  NodeExecStats::default_instance_->InitAsDefaultInstance();
  DeviceStepStats::default_instance_->InitAsDefaultInstance();
  StepStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocatorMemoryUsed::kAllocatorNameFieldNumber;
const int AllocatorMemoryUsed::kTotalBytesFieldNumber;
const int AllocatorMemoryUsed::kPeakBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocatorMemoryUsed::AllocatorMemoryUsed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AllocatorMemoryUsed)
}

AllocatorMemoryUsed::AllocatorMemoryUsed(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AllocatorMemoryUsed)
}

void AllocatorMemoryUsed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AllocatorMemoryUsed::AllocatorMemoryUsed(const AllocatorMemoryUsed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.AllocatorMemoryUsed)
}

void AllocatorMemoryUsed::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  allocator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_bytes_ = GOOGLE_LONGLONG(0);
  peak_bytes_ = GOOGLE_LONGLONG(0);
}

AllocatorMemoryUsed::~AllocatorMemoryUsed() {
  // @@protoc_insertion_point(destructor:tensorflow.AllocatorMemoryUsed)
  SharedDtor();
}

void AllocatorMemoryUsed::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  allocator_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void AllocatorMemoryUsed::ArenaDtor(void* object) {
  AllocatorMemoryUsed* _this = reinterpret_cast< AllocatorMemoryUsed* >(object);
  (void)_this;
}
void AllocatorMemoryUsed::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AllocatorMemoryUsed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocatorMemoryUsed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocatorMemoryUsed_descriptor_;
}

const AllocatorMemoryUsed& AllocatorMemoryUsed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  return *default_instance_;
}

AllocatorMemoryUsed* AllocatorMemoryUsed::default_instance_ = NULL;

AllocatorMemoryUsed* AllocatorMemoryUsed::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AllocatorMemoryUsed>(arena);
}

void AllocatorMemoryUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AllocatorMemoryUsed)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AllocatorMemoryUsed, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AllocatorMemoryUsed*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_bytes_, peak_bytes_);
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool AllocatorMemoryUsed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AllocatorMemoryUsed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string allocator_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_allocator_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->allocator_name().data(), this->allocator_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.AllocatorMemoryUsed.allocator_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_bytes;
        break;
      }

      // optional int64 total_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_peak_bytes;
        break;
      }

      // optional int64 peak_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_peak_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &peak_bytes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AllocatorMemoryUsed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AllocatorMemoryUsed)
  return false;
#undef DO_
}

void AllocatorMemoryUsed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AllocatorMemoryUsed)
  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocatorMemoryUsed.allocator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->allocator_name(), output);
  }

  // optional int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_bytes(), output);
  }

  // optional int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->peak_bytes(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.AllocatorMemoryUsed)
}

::google::protobuf::uint8* AllocatorMemoryUsed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AllocatorMemoryUsed)
  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->allocator_name().data(), this->allocator_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocatorMemoryUsed.allocator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->allocator_name(), target);
  }

  // optional int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_bytes(), target);
  }

  // optional int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->peak_bytes(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AllocatorMemoryUsed)
  return target;
}

int AllocatorMemoryUsed::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AllocatorMemoryUsed)
  int total_size = 0;

  // optional string allocator_name = 1;
  if (this->allocator_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->allocator_name());
  }

  // optional int64 total_bytes = 2;
  if (this->total_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_bytes());
  }

  // optional int64 peak_bytes = 3;
  if (this->peak_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->peak_bytes());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocatorMemoryUsed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AllocatorMemoryUsed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllocatorMemoryUsed* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocatorMemoryUsed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AllocatorMemoryUsed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AllocatorMemoryUsed)
    MergeFrom(*source);
  }
}

void AllocatorMemoryUsed::MergeFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AllocatorMemoryUsed)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.allocator_name().size() > 0) {
    set_allocator_name(from.allocator_name());
  }
  if (from.total_bytes() != 0) {
    set_total_bytes(from.total_bytes());
  }
  if (from.peak_bytes() != 0) {
    set_peak_bytes(from.peak_bytes());
  }
}

void AllocatorMemoryUsed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocatorMemoryUsed::CopyFrom(const AllocatorMemoryUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AllocatorMemoryUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocatorMemoryUsed::IsInitialized() const {

  return true;
}

void AllocatorMemoryUsed::Swap(AllocatorMemoryUsed* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AllocatorMemoryUsed temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void AllocatorMemoryUsed::UnsafeArenaSwap(AllocatorMemoryUsed* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AllocatorMemoryUsed::InternalSwap(AllocatorMemoryUsed* other) {
  allocator_name_.Swap(&other->allocator_name_);
  std::swap(total_bytes_, other->total_bytes_);
  std::swap(peak_bytes_, other->peak_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocatorMemoryUsed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocatorMemoryUsed_descriptor_;
  metadata.reflection = AllocatorMemoryUsed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocatorMemoryUsed

// optional string allocator_name = 1;
void AllocatorMemoryUsed::clear_allocator_name() {
  allocator_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& AllocatorMemoryUsed::allocator_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.allocator_name)
  return allocator_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AllocatorMemoryUsed::set_allocator_name(const ::std::string& value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.allocator_name)
}
 void AllocatorMemoryUsed::set_allocator_name(const char* value) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.AllocatorMemoryUsed.allocator_name)
}
 void AllocatorMemoryUsed::set_allocator_name(const char* value,
    size_t size) {
  
  allocator_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.AllocatorMemoryUsed.allocator_name)
}
 ::std::string* AllocatorMemoryUsed::mutable_allocator_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.AllocatorMemoryUsed.allocator_name)
  return allocator_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* AllocatorMemoryUsed::release_allocator_name() {
  // @@protoc_insertion_point(field_release:tensorflow.AllocatorMemoryUsed.allocator_name)
  
  return allocator_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* AllocatorMemoryUsed::unsafe_arena_release_allocator_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.AllocatorMemoryUsed.allocator_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return allocator_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void AllocatorMemoryUsed::set_allocated_allocator_name(::std::string* allocator_name) {
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allocator_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.AllocatorMemoryUsed.allocator_name)
}
 void AllocatorMemoryUsed::unsafe_arena_set_allocated_allocator_name(
    ::std::string* allocator_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (allocator_name != NULL) {
    
  } else {
    
  }
  allocator_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      allocator_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.AllocatorMemoryUsed.allocator_name)
}

// optional int64 total_bytes = 2;
void AllocatorMemoryUsed::clear_total_bytes() {
  total_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AllocatorMemoryUsed::total_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.total_bytes)
  return total_bytes_;
}
 void AllocatorMemoryUsed::set_total_bytes(::google::protobuf::int64 value) {
  
  total_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.total_bytes)
}

// optional int64 peak_bytes = 3;
void AllocatorMemoryUsed::clear_peak_bytes() {
  peak_bytes_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 AllocatorMemoryUsed::peak_bytes() const {
  // @@protoc_insertion_point(field_get:tensorflow.AllocatorMemoryUsed.peak_bytes)
  return peak_bytes_;
}
 void AllocatorMemoryUsed::set_peak_bytes(::google::protobuf::int64 value) {
  
  peak_bytes_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AllocatorMemoryUsed.peak_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NodeOutput::_slow_mutable_tensor_description() {
  tensor_description_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
      GetArenaNoVirtual());
}
::tensorflow::TensorDescription* NodeOutput::_slow_release_tensor_description() {
  if (tensor_description_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::TensorDescription* temp = new ::tensorflow::TensorDescription;
    temp->MergeFrom(*tensor_description_);
    tensor_description_ = NULL;
    return temp;
  }
}
::tensorflow::TensorDescription* NodeOutput::unsafe_arena_release_tensor_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeOutput.tensor_description)
  
  ::tensorflow::TensorDescription* temp = tensor_description_;
  tensor_description_ = NULL;
  return temp;
}
void NodeOutput::_slow_set_allocated_tensor_description(
    ::google::protobuf::Arena* message_arena, ::tensorflow::TensorDescription** tensor_description) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*tensor_description) == NULL) {
      message_arena->Own(*tensor_description);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*tensor_description)) {
      ::tensorflow::TensorDescription* new_tensor_description = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::TensorDescription >(
            message_arena);
      new_tensor_description->CopyFrom(**tensor_description);
      *tensor_description = new_tensor_description;
    }
}
void NodeOutput::unsafe_arena_set_allocated_tensor_description(
    ::tensorflow::TensorDescription* tensor_description) {
  if (GetArenaNoVirtual() == NULL) {
    delete tensor_description_;
  }
  tensor_description_ = tensor_description;
  if (tensor_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeOutput.tensor_description)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeOutput::kSlotFieldNumber;
const int NodeOutput::kTensorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeOutput::NodeOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeOutput)
}

NodeOutput::NodeOutput(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeOutput)
}

void NodeOutput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  tensor_description_ = const_cast< ::tensorflow::TensorDescription*>(&::tensorflow::TensorDescription::default_instance());
}

NodeOutput::NodeOutput(const NodeOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeOutput)
}

void NodeOutput::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  slot_ = 0;
  tensor_description_ = NULL;
}

NodeOutput::~NodeOutput() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeOutput)
  SharedDtor();
}

void NodeOutput::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
    delete tensor_description_;
  }
}

void NodeOutput::ArenaDtor(void* object) {
  NodeOutput* _this = reinterpret_cast< NodeOutput* >(object);
  (void)_this;
}
void NodeOutput::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeOutput_descriptor_;
}

const NodeOutput& NodeOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  return *default_instance_;
}

NodeOutput* NodeOutput::default_instance_ = NULL;

NodeOutput* NodeOutput::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeOutput>(arena);
}

void NodeOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeOutput)
  slot_ = 0;
  if (GetArenaNoVirtual() == NULL && tensor_description_ != NULL) delete tensor_description_;
  tensor_description_ = NULL;
}

bool NodeOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tensor_description;
        break;
      }

      // optional .tensorflow.TensorDescription tensor_description = 3;
      case 3: {
        if (tag == 26) {
         parse_tensor_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeOutput)
  return false;
#undef DO_
}

void NodeOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeOutput)
  // optional int32 slot = 1;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tensor_description_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.NodeOutput)
}

::google::protobuf::uint8* NodeOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeOutput)
  // optional int32 slot = 1;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->tensor_description_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeOutput)
  return target;
}

int NodeOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeOutput)
  int total_size = 0;

  // optional int32 slot = 1;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  // optional .tensorflow.TensorDescription tensor_description = 3;
  if (this->has_tensor_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_description_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeOutput)
    MergeFrom(*source);
  }
}

void NodeOutput::MergeFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.has_tensor_description()) {
    mutable_tensor_description()->::tensorflow::TensorDescription::MergeFrom(from.tensor_description());
  }
}

void NodeOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeOutput::CopyFrom(const NodeOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeOutput::IsInitialized() const {

  return true;
}

void NodeOutput::Swap(NodeOutput* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeOutput temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NodeOutput::UnsafeArenaSwap(NodeOutput* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeOutput::InternalSwap(NodeOutput* other) {
  std::swap(slot_, other->slot_);
  std::swap(tensor_description_, other->tensor_description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeOutput_descriptor_;
  metadata.reflection = NodeOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeOutput

// optional int32 slot = 1;
void NodeOutput::clear_slot() {
  slot_ = 0;
}
 ::google::protobuf::int32 NodeOutput::slot() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.slot)
  return slot_;
}
 void NodeOutput::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeOutput.slot)
}

// optional .tensorflow.TensorDescription tensor_description = 3;
bool NodeOutput::has_tensor_description() const {
  return !_is_default_instance_ && tensor_description_ != NULL;
}
void NodeOutput::clear_tensor_description() {
  if (GetArenaNoVirtual() == NULL && tensor_description_ != NULL) delete tensor_description_;
  tensor_description_ = NULL;
}
const ::tensorflow::TensorDescription& NodeOutput::tensor_description() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeOutput.tensor_description)
  return tensor_description_ != NULL ? *tensor_description_ : *default_instance_->tensor_description_;
}
::tensorflow::TensorDescription* NodeOutput::mutable_tensor_description() {
  
  if (tensor_description_ == NULL) {
    _slow_mutable_tensor_description();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeOutput.tensor_description)
  return tensor_description_;
}
::tensorflow::TensorDescription* NodeOutput::release_tensor_description() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeOutput.tensor_description)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_tensor_description();
  } else {
    ::tensorflow::TensorDescription* temp = tensor_description_;
    tensor_description_ = NULL;
    return temp;
  }
}
 void NodeOutput::set_allocated_tensor_description(::tensorflow::TensorDescription* tensor_description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tensor_description_;
  }
  if (tensor_description != NULL) {
    _slow_set_allocated_tensor_description(message_arena, &tensor_description);
  }
  tensor_description_ = tensor_description;
  if (tensor_description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeOutput.tensor_description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeExecStats::kNodeNameFieldNumber;
const int NodeExecStats::kAllStartMicrosFieldNumber;
const int NodeExecStats::kOpStartRelMicrosFieldNumber;
const int NodeExecStats::kOpEndRelMicrosFieldNumber;
const int NodeExecStats::kAllEndRelMicrosFieldNumber;
const int NodeExecStats::kMemoryFieldNumber;
const int NodeExecStats::kOutputFieldNumber;
const int NodeExecStats::kTimelineLabelFieldNumber;
const int NodeExecStats::kScheduledMicrosFieldNumber;
const int NodeExecStats::kThreadIdFieldNumber;
const int NodeExecStats::kReferencedTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeExecStats::NodeExecStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.NodeExecStats)
}

NodeExecStats::NodeExecStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  memory_(arena),
  output_(arena),
  referenced_tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NodeExecStats)
}

void NodeExecStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NodeExecStats::NodeExecStats(const NodeExecStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NodeExecStats)
}

void NodeExecStats::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  all_start_micros_ = GOOGLE_LONGLONG(0);
  op_start_rel_micros_ = GOOGLE_LONGLONG(0);
  op_end_rel_micros_ = GOOGLE_LONGLONG(0);
  all_end_rel_micros_ = GOOGLE_LONGLONG(0);
  timeline_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduled_micros_ = GOOGLE_LONGLONG(0);
  thread_id_ = 0u;
}

NodeExecStats::~NodeExecStats() {
  // @@protoc_insertion_point(destructor:tensorflow.NodeExecStats)
  SharedDtor();
}

void NodeExecStats::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  node_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  timeline_label_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void NodeExecStats::ArenaDtor(void* object) {
  NodeExecStats* _this = reinterpret_cast< NodeExecStats* >(object);
  (void)_this;
}
void NodeExecStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NodeExecStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeExecStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeExecStats_descriptor_;
}

const NodeExecStats& NodeExecStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  return *default_instance_;
}

NodeExecStats* NodeExecStats::default_instance_ = NULL;

NodeExecStats* NodeExecStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NodeExecStats>(arena);
}

void NodeExecStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NodeExecStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeExecStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeExecStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(all_start_micros_, all_end_rel_micros_);
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  timeline_label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  scheduled_micros_ = GOOGLE_LONGLONG(0);
  thread_id_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  memory_.Clear();
  output_.Clear();
  referenced_tensor_.Clear();
}

bool NodeExecStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.NodeExecStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeExecStats.node_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_all_start_micros;
        break;
      }

      // optional int64 all_start_micros = 2;
      case 2: {
        if (tag == 16) {
         parse_all_start_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_start_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_op_start_rel_micros;
        break;
      }

      // optional int64 op_start_rel_micros = 3;
      case 3: {
        if (tag == 24) {
         parse_op_start_rel_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_start_rel_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op_end_rel_micros;
        break;
      }

      // optional int64 op_end_rel_micros = 4;
      case 4: {
        if (tag == 32) {
         parse_op_end_rel_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &op_end_rel_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_all_end_rel_micros;
        break;
      }

      // optional int64 all_end_rel_micros = 5;
      case 5: {
        if (tag == 40) {
         parse_all_end_rel_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &all_end_rel_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_memory;
        break;
      }

      // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
      case 6: {
        if (tag == 50) {
         parse_memory:
          DO_(input->IncrementRecursionDepth());
         parse_loop_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_memory;
        if (input->ExpectTag(58)) goto parse_loop_output;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.NodeOutput output = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_output;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_timeline_label;
        break;
      }

      // optional string timeline_label = 8;
      case 8: {
        if (tag == 66) {
         parse_timeline_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeline_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timeline_label().data(), this->timeline_label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.NodeExecStats.timeline_label"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_scheduled_micros;
        break;
      }

      // optional int64 scheduled_micros = 9;
      case 9: {
        if (tag == 72) {
         parse_scheduled_micros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scheduled_micros_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_thread_id;
        break;
      }

      // optional uint32 thread_id = 10;
      case 10: {
        if (tag == 80) {
         parse_thread_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_referenced_tensor;
        break;
      }

      // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
      case 11: {
        if (tag == 90) {
         parse_referenced_tensor:
          DO_(input->IncrementRecursionDepth());
         parse_loop_referenced_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_referenced_tensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_referenced_tensor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.NodeExecStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.NodeExecStats)
  return false;
#undef DO_
}

void NodeExecStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.NodeExecStats)
  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->all_start_micros(), output);
  }

  // optional int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->op_start_rel_micros(), output);
  }

  // optional int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->op_end_rel_micros(), output);
  }

  // optional int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->all_end_rel_micros(), output);
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  for (unsigned int i = 0, n = this->memory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memory(i), output);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  for (unsigned int i = 0, n = this->output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->output(i), output);
  }

  // optional string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeline_label().data(), this->timeline_label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.timeline_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->timeline_label(), output);
  }

  // optional int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->scheduled_micros(), output);
  }

  // optional uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->thread_id(), output);
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  for (unsigned int i = 0, n = this->referenced_tensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->referenced_tensor(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.NodeExecStats)
}

::google::protobuf::uint8* NodeExecStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NodeExecStats)
  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->all_start_micros(), target);
  }

  // optional int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->op_start_rel_micros(), target);
  }

  // optional int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->op_end_rel_micros(), target);
  }

  // optional int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->all_end_rel_micros(), target);
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  for (unsigned int i = 0, n = this->memory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memory(i), target);
  }

  // repeated .tensorflow.NodeOutput output = 7;
  for (unsigned int i = 0, n = this->output_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->output(i), target);
  }

  // optional string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timeline_label().data(), this->timeline_label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NodeExecStats.timeline_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timeline_label(), target);
  }

  // optional int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->scheduled_micros(), target);
  }

  // optional uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->thread_id(), target);
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  for (unsigned int i = 0, n = this->referenced_tensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->referenced_tensor(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NodeExecStats)
  return target;
}

int NodeExecStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NodeExecStats)
  int total_size = 0;

  // optional string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // optional int64 all_start_micros = 2;
  if (this->all_start_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_start_micros());
  }

  // optional int64 op_start_rel_micros = 3;
  if (this->op_start_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_start_rel_micros());
  }

  // optional int64 op_end_rel_micros = 4;
  if (this->op_end_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->op_end_rel_micros());
  }

  // optional int64 all_end_rel_micros = 5;
  if (this->all_end_rel_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->all_end_rel_micros());
  }

  // optional string timeline_label = 8;
  if (this->timeline_label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timeline_label());
  }

  // optional int64 scheduled_micros = 9;
  if (this->scheduled_micros() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->scheduled_micros());
  }

  // optional uint32 thread_id = 10;
  if (this->thread_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->thread_id());
  }

  // repeated .tensorflow.AllocatorMemoryUsed memory = 6;
  total_size += 1 * this->memory_size();
  for (int i = 0; i < this->memory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memory(i));
  }

  // repeated .tensorflow.NodeOutput output = 7;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  // repeated .tensorflow.AllocationDescription referenced_tensor = 11;
  total_size += 1 * this->referenced_tensor_size();
  for (int i = 0; i < this->referenced_tensor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->referenced_tensor(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeExecStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.NodeExecStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeExecStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeExecStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.NodeExecStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.NodeExecStats)
    MergeFrom(*source);
  }
}

void NodeExecStats::MergeFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NodeExecStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  memory_.MergeFrom(from.memory_);
  output_.MergeFrom(from.output_);
  referenced_tensor_.MergeFrom(from.referenced_tensor_);
  if (from.node_name().size() > 0) {
    set_node_name(from.node_name());
  }
  if (from.all_start_micros() != 0) {
    set_all_start_micros(from.all_start_micros());
  }
  if (from.op_start_rel_micros() != 0) {
    set_op_start_rel_micros(from.op_start_rel_micros());
  }
  if (from.op_end_rel_micros() != 0) {
    set_op_end_rel_micros(from.op_end_rel_micros());
  }
  if (from.all_end_rel_micros() != 0) {
    set_all_end_rel_micros(from.all_end_rel_micros());
  }
  if (from.timeline_label().size() > 0) {
    set_timeline_label(from.timeline_label());
  }
  if (from.scheduled_micros() != 0) {
    set_scheduled_micros(from.scheduled_micros());
  }
  if (from.thread_id() != 0) {
    set_thread_id(from.thread_id());
  }
}

void NodeExecStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeExecStats::CopyFrom(const NodeExecStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NodeExecStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeExecStats::IsInitialized() const {

  return true;
}

void NodeExecStats::Swap(NodeExecStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NodeExecStats temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void NodeExecStats::UnsafeArenaSwap(NodeExecStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NodeExecStats::InternalSwap(NodeExecStats* other) {
  node_name_.Swap(&other->node_name_);
  std::swap(all_start_micros_, other->all_start_micros_);
  std::swap(op_start_rel_micros_, other->op_start_rel_micros_);
  std::swap(op_end_rel_micros_, other->op_end_rel_micros_);
  std::swap(all_end_rel_micros_, other->all_end_rel_micros_);
  memory_.UnsafeArenaSwap(&other->memory_);
  output_.UnsafeArenaSwap(&other->output_);
  timeline_label_.Swap(&other->timeline_label_);
  std::swap(scheduled_micros_, other->scheduled_micros_);
  std::swap(thread_id_, other->thread_id_);
  referenced_tensor_.UnsafeArenaSwap(&other->referenced_tensor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeExecStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeExecStats_descriptor_;
  metadata.reflection = NodeExecStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeExecStats

// optional string node_name = 1;
void NodeExecStats::clear_node_name() {
  node_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NodeExecStats::node_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.node_name)
  return node_name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeExecStats::set_node_name(const ::std::string& value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.node_name)
}
 void NodeExecStats::set_node_name(const char* value) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeExecStats.node_name)
}
 void NodeExecStats::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeExecStats.node_name)
}
 ::std::string* NodeExecStats::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.node_name)
  return node_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeExecStats::release_node_name() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.node_name)
  
  return node_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeExecStats::unsafe_arena_release_node_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeExecStats.node_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return node_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NodeExecStats::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.node_name)
}
 void NodeExecStats::unsafe_arena_set_allocated_node_name(
    ::std::string* node_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      node_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeExecStats.node_name)
}

// optional int64 all_start_micros = 2;
void NodeExecStats::clear_all_start_micros() {
  all_start_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodeExecStats::all_start_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_start_micros)
  return all_start_micros_;
}
 void NodeExecStats::set_all_start_micros(::google::protobuf::int64 value) {
  
  all_start_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_start_micros)
}

// optional int64 op_start_rel_micros = 3;
void NodeExecStats::clear_op_start_rel_micros() {
  op_start_rel_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodeExecStats::op_start_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_start_rel_micros)
  return op_start_rel_micros_;
}
 void NodeExecStats::set_op_start_rel_micros(::google::protobuf::int64 value) {
  
  op_start_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_start_rel_micros)
}

// optional int64 op_end_rel_micros = 4;
void NodeExecStats::clear_op_end_rel_micros() {
  op_end_rel_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodeExecStats::op_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.op_end_rel_micros)
  return op_end_rel_micros_;
}
 void NodeExecStats::set_op_end_rel_micros(::google::protobuf::int64 value) {
  
  op_end_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.op_end_rel_micros)
}

// optional int64 all_end_rel_micros = 5;
void NodeExecStats::clear_all_end_rel_micros() {
  all_end_rel_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodeExecStats::all_end_rel_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.all_end_rel_micros)
  return all_end_rel_micros_;
}
 void NodeExecStats::set_all_end_rel_micros(::google::protobuf::int64 value) {
  
  all_end_rel_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.all_end_rel_micros)
}

// repeated .tensorflow.AllocatorMemoryUsed memory = 6;
int NodeExecStats::memory_size() const {
  return memory_.size();
}
void NodeExecStats::clear_memory() {
  memory_.Clear();
}
const ::tensorflow::AllocatorMemoryUsed& NodeExecStats::memory(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.memory)
  return memory_.Get(index);
}
::tensorflow::AllocatorMemoryUsed* NodeExecStats::mutable_memory(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.memory)
  return memory_.Mutable(index);
}
::tensorflow::AllocatorMemoryUsed* NodeExecStats::add_memory() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.memory)
  return memory_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >*
NodeExecStats::mutable_memory() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.memory)
  return &memory_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocatorMemoryUsed >&
NodeExecStats::memory() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.memory)
  return memory_;
}

// repeated .tensorflow.NodeOutput output = 7;
int NodeExecStats::output_size() const {
  return output_.size();
}
void NodeExecStats::clear_output() {
  output_.Clear();
}
const ::tensorflow::NodeOutput& NodeExecStats::output(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.output)
  return output_.Get(index);
}
::tensorflow::NodeOutput* NodeExecStats::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.output)
  return output_.Mutable(index);
}
::tensorflow::NodeOutput* NodeExecStats::add_output() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.output)
  return output_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NodeOutput >*
NodeExecStats::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.output)
  return &output_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NodeOutput >&
NodeExecStats::output() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.output)
  return output_;
}

// optional string timeline_label = 8;
void NodeExecStats::clear_timeline_label() {
  timeline_label_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& NodeExecStats::timeline_label() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.timeline_label)
  return timeline_label_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NodeExecStats::set_timeline_label(const ::std::string& value) {
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.timeline_label)
}
 void NodeExecStats::set_timeline_label(const char* value) {
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.NodeExecStats.timeline_label)
}
 void NodeExecStats::set_timeline_label(const char* value,
    size_t size) {
  
  timeline_label_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.NodeExecStats.timeline_label)
}
 ::std::string* NodeExecStats::mutable_timeline_label() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.timeline_label)
  return timeline_label_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeExecStats::release_timeline_label() {
  // @@protoc_insertion_point(field_release:tensorflow.NodeExecStats.timeline_label)
  
  return timeline_label_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* NodeExecStats::unsafe_arena_release_timeline_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.NodeExecStats.timeline_label)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return timeline_label_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void NodeExecStats::set_allocated_timeline_label(::std::string* timeline_label) {
  if (timeline_label != NULL) {
    
  } else {
    
  }
  timeline_label_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeline_label,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.NodeExecStats.timeline_label)
}
 void NodeExecStats::unsafe_arena_set_allocated_timeline_label(
    ::std::string* timeline_label) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (timeline_label != NULL) {
    
  } else {
    
  }
  timeline_label_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      timeline_label, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.NodeExecStats.timeline_label)
}

// optional int64 scheduled_micros = 9;
void NodeExecStats::clear_scheduled_micros() {
  scheduled_micros_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 NodeExecStats::scheduled_micros() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.scheduled_micros)
  return scheduled_micros_;
}
 void NodeExecStats::set_scheduled_micros(::google::protobuf::int64 value) {
  
  scheduled_micros_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.scheduled_micros)
}

// optional uint32 thread_id = 10;
void NodeExecStats::clear_thread_id() {
  thread_id_ = 0u;
}
 ::google::protobuf::uint32 NodeExecStats::thread_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.thread_id)
  return thread_id_;
}
 void NodeExecStats::set_thread_id(::google::protobuf::uint32 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.NodeExecStats.thread_id)
}

// repeated .tensorflow.AllocationDescription referenced_tensor = 11;
int NodeExecStats::referenced_tensor_size() const {
  return referenced_tensor_.size();
}
void NodeExecStats::clear_referenced_tensor() {
  referenced_tensor_.Clear();
}
const ::tensorflow::AllocationDescription& NodeExecStats::referenced_tensor(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Get(index);
}
::tensorflow::AllocationDescription* NodeExecStats::mutable_referenced_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Mutable(index);
}
::tensorflow::AllocationDescription* NodeExecStats::add_referenced_tensor() {
  // @@protoc_insertion_point(field_add:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationDescription >*
NodeExecStats::mutable_referenced_tensor() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.NodeExecStats.referenced_tensor)
  return &referenced_tensor_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::AllocationDescription >&
NodeExecStats::referenced_tensor() const {
  // @@protoc_insertion_point(field_list:tensorflow.NodeExecStats.referenced_tensor)
  return referenced_tensor_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStepStats::kDeviceFieldNumber;
const int DeviceStepStats::kNodeStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStepStats::DeviceStepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.DeviceStepStats)
}

DeviceStepStats::DeviceStepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceStepStats)
}

void DeviceStepStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceStepStats::DeviceStepStats(const DeviceStepStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceStepStats)
}

void DeviceStepStats::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DeviceStepStats::~DeviceStepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceStepStats)
  SharedDtor();
}

void DeviceStepStats::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void DeviceStepStats::ArenaDtor(void* object) {
  DeviceStepStats* _this = reinterpret_cast< DeviceStepStats* >(object);
  (void)_this;
}
void DeviceStepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeviceStepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStepStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceStepStats_descriptor_;
}

const DeviceStepStats& DeviceStepStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  return *default_instance_;
}

DeviceStepStats* DeviceStepStats::default_instance_ = NULL;

DeviceStepStats* DeviceStepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeviceStepStats>(arena);
}

void DeviceStepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceStepStats)
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  node_stats_.Clear();
}

bool DeviceStepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.DeviceStepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.DeviceStepStats.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_stats;
        break;
      }

      // repeated .tensorflow.NodeExecStats node_stats = 2;
      case 2: {
        if (tag == 18) {
         parse_node_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_node_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_node_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.DeviceStepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.DeviceStepStats)
  return false;
#undef DO_
}

void DeviceStepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.DeviceStepStats)
  // optional string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceStepStats.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device(), output);
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  for (unsigned int i = 0, n = this->node_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node_stats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.DeviceStepStats)
}

::google::protobuf::uint8* DeviceStepStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceStepStats)
  // optional string device = 1;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceStepStats.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  for (unsigned int i = 0, n = this->node_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node_stats(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceStepStats)
  return target;
}

int DeviceStepStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceStepStats)
  int total_size = 0;

  // optional string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // repeated .tensorflow.NodeExecStats node_stats = 2;
  total_size += 1 * this->node_stats_size();
  for (int i = 0; i < this->node_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.DeviceStepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceStepStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceStepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.DeviceStepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.DeviceStepStats)
    MergeFrom(*source);
  }
}

void DeviceStepStats::MergeFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceStepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  node_stats_.MergeFrom(from.node_stats_);
  if (from.device().size() > 0) {
    set_device(from.device());
  }
}

void DeviceStepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStepStats::CopyFrom(const DeviceStepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceStepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStepStats::IsInitialized() const {

  return true;
}

void DeviceStepStats::Swap(DeviceStepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeviceStepStats temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void DeviceStepStats::UnsafeArenaSwap(DeviceStepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeviceStepStats::InternalSwap(DeviceStepStats* other) {
  device_.Swap(&other->device_);
  node_stats_.UnsafeArenaSwap(&other->node_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceStepStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceStepStats_descriptor_;
  metadata.reflection = DeviceStepStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStepStats

// optional string device = 1;
void DeviceStepStats::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& DeviceStepStats::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.device)
  return device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeviceStepStats::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.DeviceStepStats.device)
}
 void DeviceStepStats::set_device(const char* value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.DeviceStepStats.device)
}
 void DeviceStepStats::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.DeviceStepStats.device)
}
 ::std::string* DeviceStepStats::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeviceStepStats::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.DeviceStepStats.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* DeviceStepStats::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.DeviceStepStats.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void DeviceStepStats::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DeviceStepStats.device)
}
 void DeviceStepStats::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.DeviceStepStats.device)
}

// repeated .tensorflow.NodeExecStats node_stats = 2;
int DeviceStepStats::node_stats_size() const {
  return node_stats_.size();
}
void DeviceStepStats::clear_node_stats() {
  node_stats_.Clear();
}
const ::tensorflow::NodeExecStats& DeviceStepStats::node_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Get(index);
}
::tensorflow::NodeExecStats* DeviceStepStats::mutable_node_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Mutable(index);
}
::tensorflow::NodeExecStats* DeviceStepStats::add_node_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.DeviceStepStats.node_stats)
  return node_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::NodeExecStats >*
DeviceStepStats::mutable_node_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.DeviceStepStats.node_stats)
  return &node_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::NodeExecStats >&
DeviceStepStats::node_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.DeviceStepStats.node_stats)
  return node_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StepStats::kDevStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StepStats::StepStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.StepStats)
}

StepStats::StepStats(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  dev_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StepStats)
}

void StepStats::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StepStats::StepStats(const StepStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.StepStats)
}

void StepStats::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StepStats::~StepStats() {
  // @@protoc_insertion_point(destructor:tensorflow.StepStats)
  SharedDtor();
}

void StepStats::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void StepStats::ArenaDtor(void* object) {
  StepStats* _this = reinterpret_cast< StepStats* >(object);
  (void)_this;
}
void StepStats::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StepStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StepStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepStats_descriptor_;
}

const StepStats& StepStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fstep_5fstats_2eproto();
  return *default_instance_;
}

StepStats* StepStats::default_instance_ = NULL;

StepStats* StepStats::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StepStats>(arena);
}

void StepStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StepStats)
  dev_stats_.Clear();
}

bool StepStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.StepStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.DeviceStepStats dev_stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dev_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dev_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_dev_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.StepStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.StepStats)
  return false;
#undef DO_
}

void StepStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.StepStats)
  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  for (unsigned int i = 0, n = this->dev_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dev_stats(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.StepStats)
}

::google::protobuf::uint8* StepStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StepStats)
  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  for (unsigned int i = 0, n = this->dev_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dev_stats(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StepStats)
  return target;
}

int StepStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StepStats)
  int total_size = 0;

  // repeated .tensorflow.DeviceStepStats dev_stats = 1;
  total_size += 1 * this->dev_stats_size();
  for (int i = 0; i < this->dev_stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dev_stats(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StepStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.StepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StepStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StepStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.StepStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.StepStats)
    MergeFrom(*source);
  }
}

void StepStats::MergeFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StepStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  dev_stats_.MergeFrom(from.dev_stats_);
}

void StepStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepStats::CopyFrom(const StepStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StepStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepStats::IsInitialized() const {

  return true;
}

void StepStats::Swap(StepStats* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StepStats temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void StepStats::UnsafeArenaSwap(StepStats* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StepStats::InternalSwap(StepStats* other) {
  dev_stats_.UnsafeArenaSwap(&other->dev_stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StepStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StepStats_descriptor_;
  metadata.reflection = StepStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StepStats

// repeated .tensorflow.DeviceStepStats dev_stats = 1;
int StepStats::dev_stats_size() const {
  return dev_stats_.size();
}
void StepStats::clear_dev_stats() {
  dev_stats_.Clear();
}
const ::tensorflow::DeviceStepStats& StepStats::dev_stats(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.StepStats.dev_stats)
  return dev_stats_.Get(index);
}
::tensorflow::DeviceStepStats* StepStats::mutable_dev_stats(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.StepStats.dev_stats)
  return dev_stats_.Mutable(index);
}
::tensorflow::DeviceStepStats* StepStats::add_dev_stats() {
  // @@protoc_insertion_point(field_add:tensorflow.StepStats.dev_stats)
  return dev_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceStepStats >*
StepStats::mutable_dev_stats() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.StepStats.dev_stats)
  return &dev_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::DeviceStepStats >&
StepStats::dev_stats() const {
  // @@protoc_insertion_point(field_list:tensorflow.StepStats.dev_stats)
  return dev_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

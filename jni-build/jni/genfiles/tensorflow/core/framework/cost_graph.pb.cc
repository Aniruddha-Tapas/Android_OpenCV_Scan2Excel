// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/cost_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/framework/cost_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {

namespace {

const ::google::protobuf::Descriptor* CostGraphDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostGraphDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostGraphDef_Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostGraphDef_Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostGraphDef_Node_InputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostGraphDef_Node_InputInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostGraphDef_Node_OutputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostGraphDef_Node_OutputInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tensorflow/core/framework/cost_graph.proto");
  GOOGLE_CHECK(file != NULL);
  CostGraphDef_descriptor_ = file->message_type(0);
  static const int CostGraphDef_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef, node_),
  };
  CostGraphDef_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CostGraphDef_descriptor_,
      CostGraphDef::default_instance_,
      CostGraphDef_offsets_,
      -1,
      -1,
      -1,
      sizeof(CostGraphDef),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef, _is_default_instance_));
  CostGraphDef_Node_descriptor_ = CostGraphDef_descriptor_->nested_type(0);
  static const int CostGraphDef_Node_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, input_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, output_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, temporary_memory_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, is_final_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, control_input_),
  };
  CostGraphDef_Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CostGraphDef_Node_descriptor_,
      CostGraphDef_Node::default_instance_,
      CostGraphDef_Node_offsets_,
      -1,
      -1,
      -1,
      sizeof(CostGraphDef_Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node, _is_default_instance_));
  CostGraphDef_Node_InputInfo_descriptor_ = CostGraphDef_Node_descriptor_->nested_type(0);
  static const int CostGraphDef_Node_InputInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_InputInfo, preceding_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_InputInfo, preceding_port_),
  };
  CostGraphDef_Node_InputInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CostGraphDef_Node_InputInfo_descriptor_,
      CostGraphDef_Node_InputInfo::default_instance_,
      CostGraphDef_Node_InputInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CostGraphDef_Node_InputInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_InputInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_InputInfo, _is_default_instance_));
  CostGraphDef_Node_OutputInfo_descriptor_ = CostGraphDef_Node_descriptor_->nested_type(1);
  static const int CostGraphDef_Node_OutputInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, alias_input_port_),
  };
  CostGraphDef_Node_OutputInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CostGraphDef_Node_OutputInfo_descriptor_,
      CostGraphDef_Node_OutputInfo::default_instance_,
      CostGraphDef_Node_OutputInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(CostGraphDef_Node_OutputInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CostGraphDef_descriptor_, &CostGraphDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CostGraphDef_Node_descriptor_, &CostGraphDef_Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CostGraphDef_Node_InputInfo_descriptor_, &CostGraphDef_Node_InputInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CostGraphDef_Node_OutputInfo_descriptor_, &CostGraphDef_Node_OutputInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  delete CostGraphDef::default_instance_;
  delete CostGraphDef_reflection_;
  delete CostGraphDef_Node::default_instance_;
  delete CostGraphDef_Node_reflection_;
  delete CostGraphDef_Node_InputInfo::default_instance_;
  delete CostGraphDef_Node_InputInfo_reflection_;
  delete CostGraphDef_Node_OutputInfo::default_instance_;
  delete CostGraphDef_Node_OutputInfo_reflection_;
}

void protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*tensorflow/core/framework/cost_graph.p"
    "roto\022\ntensorflow\"\245\003\n\014CostGraphDef\022+\n\004nod"
    "e\030\001 \003(\0132\035.tensorflow.CostGraphDef.Node\032\347"
    "\002\n\004Node\022\014\n\004name\030\001 \001(\t\022\016\n\006device\030\002 \001(\t\022\n\n"
    "\002id\030\003 \001(\005\022;\n\ninput_info\030\004 \003(\0132\'.tensorfl"
    "ow.CostGraphDef.Node.InputInfo\022=\n\013output"
    "_info\030\005 \003(\0132(.tensorflow.CostGraphDef.No"
    "de.OutputInfo\022\035\n\025temporary_memory_size\030\006"
    " \001(\003\022\020\n\010is_final\030\007 \001(\010\022\025\n\rcontrol_input\030"
    "\010 \003(\005\032;\n\tInputInfo\022\026\n\016preceding_node\030\001 \001"
    "(\005\022\026\n\016preceding_port\030\002 \001(\005\0324\n\nOutputInfo"
    "\022\014\n\004size\030\001 \001(\003\022\030\n\020alias_input_port\030\002 \001(\003"
    "B0\n\030org.tensorflow.frameworkB\017CostGraphP"
    "rotosP\001\370\001\001b\006proto3", 538);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/framework/cost_graph.proto", &protobuf_RegisterTypes);
  CostGraphDef::default_instance_ = new CostGraphDef();
  CostGraphDef_Node::default_instance_ = new CostGraphDef_Node();
  CostGraphDef_Node_InputInfo::default_instance_ = new CostGraphDef_Node_InputInfo();
  CostGraphDef_Node_OutputInfo::default_instance_ = new CostGraphDef_Node_OutputInfo();
  CostGraphDef::default_instance_->InitAsDefaultInstance();
  CostGraphDef_Node::default_instance_->InitAsDefaultInstance();
  CostGraphDef_Node_InputInfo::default_instance_->InitAsDefaultInstance();
  CostGraphDef_Node_OutputInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto {
  StaticDescriptorInitializer_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto() {
    protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  }
} static_descriptor_initializer_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostGraphDef_Node_InputInfo::kPrecedingNodeFieldNumber;
const int CostGraphDef_Node_InputInfo::kPrecedingPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CostGraphDef.Node.InputInfo)
}

CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}

void CostGraphDef_Node_InputInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(const CostGraphDef_Node_InputInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}

void CostGraphDef_Node_InputInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  preceding_node_ = 0;
  preceding_port_ = 0;
}

CostGraphDef_Node_InputInfo::~CostGraphDef_Node_InputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.InputInfo)
  SharedDtor();
}

void CostGraphDef_Node_InputInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CostGraphDef_Node_InputInfo::ArenaDtor(void* object) {
  CostGraphDef_Node_InputInfo* _this = reinterpret_cast< CostGraphDef_Node_InputInfo* >(object);
  (void)_this;
}
void CostGraphDef_Node_InputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CostGraphDef_Node_InputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostGraphDef_Node_InputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostGraphDef_Node_InputInfo_descriptor_;
}

const CostGraphDef_Node_InputInfo& CostGraphDef_Node_InputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  return *default_instance_;
}

CostGraphDef_Node_InputInfo* CostGraphDef_Node_InputInfo::default_instance_ = NULL;

CostGraphDef_Node_InputInfo* CostGraphDef_Node_InputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CostGraphDef_Node_InputInfo>(arena);
}

void CostGraphDef_Node_InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.InputInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CostGraphDef_Node_InputInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CostGraphDef_Node_InputInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(preceding_node_, preceding_port_);

#undef ZR_HELPER_
#undef ZR_

}

bool CostGraphDef_Node_InputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CostGraphDef.Node.InputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 preceding_node = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preceding_node_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preceding_port;
        break;
      }

      // optional int32 preceding_port = 2;
      case 2: {
        if (tag == 16) {
         parse_preceding_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preceding_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CostGraphDef.Node.InputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CostGraphDef.Node.InputInfo)
  return false;
#undef DO_
}

void CostGraphDef_Node_InputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CostGraphDef.Node.InputInfo)
  // optional int32 preceding_node = 1;
  if (this->preceding_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->preceding_node(), output);
  }

  // optional int32 preceding_port = 2;
  if (this->preceding_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preceding_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CostGraphDef.Node.InputInfo)
}

::google::protobuf::uint8* CostGraphDef_Node_InputInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.InputInfo)
  // optional int32 preceding_node = 1;
  if (this->preceding_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->preceding_node(), target);
  }

  // optional int32 preceding_port = 2;
  if (this->preceding_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preceding_port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.InputInfo)
  return target;
}

int CostGraphDef_Node_InputInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.InputInfo)
  int total_size = 0;

  // optional int32 preceding_node = 1;
  if (this->preceding_node() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preceding_node());
  }

  // optional int32 preceding_port = 2;
  if (this->preceding_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->preceding_port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostGraphDef_Node_InputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CostGraphDef_Node_InputInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CostGraphDef_Node_InputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node.InputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node.InputInfo)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node_InputInfo::MergeFrom(const CostGraphDef_Node_InputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.preceding_node() != 0) {
    set_preceding_node(from.preceding_node());
  }
  if (from.preceding_port() != 0) {
    set_preceding_port(from.preceding_port());
  }
}

void CostGraphDef_Node_InputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node_InputInfo::CopyFrom(const CostGraphDef_Node_InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_InputInfo::IsInitialized() const {

  return true;
}

void CostGraphDef_Node_InputInfo::Swap(CostGraphDef_Node_InputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CostGraphDef_Node_InputInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CostGraphDef_Node_InputInfo::UnsafeArenaSwap(CostGraphDef_Node_InputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CostGraphDef_Node_InputInfo::InternalSwap(CostGraphDef_Node_InputInfo* other) {
  std::swap(preceding_node_, other->preceding_node_);
  std::swap(preceding_port_, other->preceding_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostGraphDef_Node_InputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostGraphDef_Node_InputInfo_descriptor_;
  metadata.reflection = CostGraphDef_Node_InputInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostGraphDef_Node_OutputInfo::kSizeFieldNumber;
const int CostGraphDef_Node_OutputInfo::kAliasInputPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}

CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}

void CostGraphDef_Node_OutputInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(const CostGraphDef_Node_OutputInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}

void CostGraphDef_Node_OutputInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  size_ = GOOGLE_LONGLONG(0);
  alias_input_port_ = GOOGLE_LONGLONG(0);
}

CostGraphDef_Node_OutputInfo::~CostGraphDef_Node_OutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.OutputInfo)
  SharedDtor();
}

void CostGraphDef_Node_OutputInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CostGraphDef_Node_OutputInfo::ArenaDtor(void* object) {
  CostGraphDef_Node_OutputInfo* _this = reinterpret_cast< CostGraphDef_Node_OutputInfo* >(object);
  (void)_this;
}
void CostGraphDef_Node_OutputInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CostGraphDef_Node_OutputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostGraphDef_Node_OutputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostGraphDef_Node_OutputInfo_descriptor_;
}

const CostGraphDef_Node_OutputInfo& CostGraphDef_Node_OutputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  return *default_instance_;
}

CostGraphDef_Node_OutputInfo* CostGraphDef_Node_OutputInfo::default_instance_ = NULL;

CostGraphDef_Node_OutputInfo* CostGraphDef_Node_OutputInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CostGraphDef_Node_OutputInfo>(arena);
}

void CostGraphDef_Node_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.OutputInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CostGraphDef_Node_OutputInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CostGraphDef_Node_OutputInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, alias_input_port_);

#undef ZR_HELPER_
#undef ZR_

}

bool CostGraphDef_Node_OutputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CostGraphDef.Node.OutputInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_alias_input_port;
        break;
      }

      // optional int64 alias_input_port = 2;
      case 2: {
        if (tag == 16) {
         parse_alias_input_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &alias_input_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CostGraphDef.Node.OutputInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CostGraphDef.Node.OutputInfo)
  return false;
#undef DO_
}

void CostGraphDef_Node_OutputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CostGraphDef.Node.OutputInfo)
  // optional int64 size = 1;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->size(), output);
  }

  // optional int64 alias_input_port = 2;
  if (this->alias_input_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->alias_input_port(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CostGraphDef.Node.OutputInfo)
}

::google::protobuf::uint8* CostGraphDef_Node_OutputInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.OutputInfo)
  // optional int64 size = 1;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->size(), target);
  }

  // optional int64 alias_input_port = 2;
  if (this->alias_input_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->alias_input_port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.OutputInfo)
  return target;
}

int CostGraphDef_Node_OutputInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.OutputInfo)
  int total_size = 0;

  // optional int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // optional int64 alias_input_port = 2;
  if (this->alias_input_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->alias_input_port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostGraphDef_Node_OutputInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CostGraphDef_Node_OutputInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CostGraphDef_Node_OutputInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node.OutputInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node.OutputInfo)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node_OutputInfo::MergeFrom(const CostGraphDef_Node_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.alias_input_port() != 0) {
    set_alias_input_port(from.alias_input_port());
  }
}

void CostGraphDef_Node_OutputInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node_OutputInfo::CopyFrom(const CostGraphDef_Node_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_OutputInfo::IsInitialized() const {

  return true;
}

void CostGraphDef_Node_OutputInfo::Swap(CostGraphDef_Node_OutputInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CostGraphDef_Node_OutputInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CostGraphDef_Node_OutputInfo::UnsafeArenaSwap(CostGraphDef_Node_OutputInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CostGraphDef_Node_OutputInfo::InternalSwap(CostGraphDef_Node_OutputInfo* other) {
  std::swap(size_, other->size_);
  std::swap(alias_input_port_, other->alias_input_port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostGraphDef_Node_OutputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostGraphDef_Node_OutputInfo_descriptor_;
  metadata.reflection = CostGraphDef_Node_OutputInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostGraphDef_Node::kNameFieldNumber;
const int CostGraphDef_Node::kDeviceFieldNumber;
const int CostGraphDef_Node::kIdFieldNumber;
const int CostGraphDef_Node::kInputInfoFieldNumber;
const int CostGraphDef_Node::kOutputInfoFieldNumber;
const int CostGraphDef_Node::kTemporaryMemorySizeFieldNumber;
const int CostGraphDef_Node::kIsFinalFieldNumber;
const int CostGraphDef_Node::kControlInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostGraphDef_Node::CostGraphDef_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CostGraphDef.Node)
}

CostGraphDef_Node::CostGraphDef_Node(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  input_info_(arena),
  output_info_(arena),
  control_input_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node)
}

void CostGraphDef_Node::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CostGraphDef_Node::CostGraphDef_Node(const CostGraphDef_Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node)
}

void CostGraphDef_Node::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  temporary_memory_size_ = GOOGLE_LONGLONG(0);
  is_final_ = false;
}

CostGraphDef_Node::~CostGraphDef_Node() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node)
  SharedDtor();
}

void CostGraphDef_Node::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void CostGraphDef_Node::ArenaDtor(void* object) {
  CostGraphDef_Node* _this = reinterpret_cast< CostGraphDef_Node* >(object);
  (void)_this;
}
void CostGraphDef_Node::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CostGraphDef_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostGraphDef_Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostGraphDef_Node_descriptor_;
}

const CostGraphDef_Node& CostGraphDef_Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  return *default_instance_;
}

CostGraphDef_Node* CostGraphDef_Node::default_instance_ = NULL;

CostGraphDef_Node* CostGraphDef_Node::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CostGraphDef_Node>(arena);
}

void CostGraphDef_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CostGraphDef_Node, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CostGraphDef_Node*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, temporary_memory_size_);
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

  input_info_.Clear();
  output_info_.Clear();
  control_input_.Clear();
}

bool CostGraphDef_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CostGraphDef.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CostGraphDef.Node.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional string device = 2;
      case 2: {
        if (tag == 18) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.CostGraphDef.Node.device"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_info;
        break;
      }

      // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
      case 4: {
        if (tag == 34) {
         parse_input_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_input_info;
        if (input->ExpectTag(42)) goto parse_loop_output_info;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_output_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_output_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_output_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_temporary_memory_size;
        break;
      }

      // optional int64 temporary_memory_size = 6;
      case 6: {
        if (tag == 48) {
         parse_temporary_memory_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &temporary_memory_size_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_final;
        break;
      }

      // optional bool is_final = 7;
      case 7: {
        if (tag == 56) {
         parse_is_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_control_input;
        break;
      }

      // repeated int32 control_input = 8;
      case 8: {
        if (tag == 66) {
         parse_control_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_control_input())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_control_input())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CostGraphDef.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CostGraphDef.Node)
  return false;
#undef DO_
}

void CostGraphDef_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CostGraphDef.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device(), output);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  for (unsigned int i = 0, n = this->input_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input_info(i), output);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  for (unsigned int i = 0, n = this->output_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output_info(i), output);
  }

  // optional int64 temporary_memory_size = 6;
  if (this->temporary_memory_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->temporary_memory_size(), output);
  }

  // optional bool is_final = 7;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_final(), output);
  }

  // repeated int32 control_input = 8;
  if (this->control_input_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_control_input_cached_byte_size_);
  }
  for (int i = 0; i < this->control_input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->control_input(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CostGraphDef.Node)
}

::google::protobuf::uint8* CostGraphDef_Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string device = 2;
  if (this->device().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  for (unsigned int i = 0, n = this->input_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->input_info(i), target);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  for (unsigned int i = 0, n = this->output_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output_info(i), target);
  }

  // optional int64 temporary_memory_size = 6;
  if (this->temporary_memory_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->temporary_memory_size(), target);
  }

  // optional bool is_final = 7;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_final(), target);
  }

  // repeated int32 control_input = 8;
  if (this->control_input_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _control_input_cached_byte_size_, target);
  }
  for (int i = 0; i < this->control_input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->control_input(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node)
  return target;
}

int CostGraphDef_Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string device = 2;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int64 temporary_memory_size = 6;
  if (this->temporary_memory_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->temporary_memory_size());
  }

  // optional bool is_final = 7;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  total_size += 1 * this->input_info_size();
  for (int i = 0; i < this->input_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_info(i));
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  total_size += 1 * this->output_info_size();
  for (int i = 0; i < this->output_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_info(i));
  }

  // repeated int32 control_input = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->control_input_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->control_input(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _control_input_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostGraphDef_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CostGraphDef_Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CostGraphDef_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef.Node)
    MergeFrom(*source);
  }
}

void CostGraphDef_Node::MergeFrom(const CostGraphDef_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  input_info_.MergeFrom(from.input_info_);
  output_info_.MergeFrom(from.output_info_);
  control_input_.MergeFrom(from.control_input_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.device().size() > 0) {
    set_device(from.device());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.temporary_memory_size() != 0) {
    set_temporary_memory_size(from.temporary_memory_size());
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
}

void CostGraphDef_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef_Node::CopyFrom(const CostGraphDef_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node::IsInitialized() const {

  return true;
}

void CostGraphDef_Node::Swap(CostGraphDef_Node* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CostGraphDef_Node temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CostGraphDef_Node::UnsafeArenaSwap(CostGraphDef_Node* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CostGraphDef_Node::InternalSwap(CostGraphDef_Node* other) {
  name_.Swap(&other->name_);
  device_.Swap(&other->device_);
  std::swap(id_, other->id_);
  input_info_.UnsafeArenaSwap(&other->input_info_);
  output_info_.UnsafeArenaSwap(&other->output_info_);
  std::swap(temporary_memory_size_, other->temporary_memory_size_);
  std::swap(is_final_, other->is_final_);
  control_input_.UnsafeArenaSwap(&other->control_input_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostGraphDef_Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostGraphDef_Node_descriptor_;
  metadata.reflection = CostGraphDef_Node_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CostGraphDef::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CostGraphDef::CostGraphDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.CostGraphDef)
}

CostGraphDef::CostGraphDef(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef)
}

void CostGraphDef::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CostGraphDef::CostGraphDef(const CostGraphDef& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef)
}

void CostGraphDef::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CostGraphDef::~CostGraphDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef)
  SharedDtor();
}

void CostGraphDef::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void CostGraphDef::ArenaDtor(void* object) {
  CostGraphDef* _this = reinterpret_cast< CostGraphDef* >(object);
  (void)_this;
}
void CostGraphDef::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CostGraphDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostGraphDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostGraphDef_descriptor_;
}

const CostGraphDef& CostGraphDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto();
  return *default_instance_;
}

CostGraphDef* CostGraphDef::default_instance_ = NULL;

CostGraphDef* CostGraphDef::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CostGraphDef>(arena);
}

void CostGraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef)
  node_.Clear();
}

bool CostGraphDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.CostGraphDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.CostGraphDef.Node node = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_node;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.CostGraphDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.CostGraphDef)
  return false;
#undef DO_
}

void CostGraphDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.CostGraphDef)
  // repeated .tensorflow.CostGraphDef.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.CostGraphDef)
}

::google::protobuf::uint8* CostGraphDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef)
  // repeated .tensorflow.CostGraphDef.Node node = 1;
  for (unsigned int i = 0, n = this->node_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef)
  return target;
}

int CostGraphDef::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef)
  int total_size = 0;

  // repeated .tensorflow.CostGraphDef.Node node = 1;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostGraphDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.CostGraphDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CostGraphDef* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CostGraphDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.CostGraphDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.CostGraphDef)
    MergeFrom(*source);
  }
}

void CostGraphDef::MergeFrom(const CostGraphDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  node_.MergeFrom(from.node_);
}

void CostGraphDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.CostGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostGraphDef::CopyFrom(const CostGraphDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef::IsInitialized() const {

  return true;
}

void CostGraphDef::Swap(CostGraphDef* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CostGraphDef temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void CostGraphDef::UnsafeArenaSwap(CostGraphDef* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CostGraphDef::InternalSwap(CostGraphDef* other) {
  node_.UnsafeArenaSwap(&other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CostGraphDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostGraphDef_descriptor_;
  metadata.reflection = CostGraphDef_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CostGraphDef_Node_InputInfo

// optional int32 preceding_node = 1;
void CostGraphDef_Node_InputInfo::clear_preceding_node() {
  preceding_node_ = 0;
}
 ::google::protobuf::int32 CostGraphDef_Node_InputInfo::preceding_node() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.InputInfo.preceding_node)
  return preceding_node_;
}
 void CostGraphDef_Node_InputInfo::set_preceding_node(::google::protobuf::int32 value) {
  
  preceding_node_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.InputInfo.preceding_node)
}

// optional int32 preceding_port = 2;
void CostGraphDef_Node_InputInfo::clear_preceding_port() {
  preceding_port_ = 0;
}
 ::google::protobuf::int32 CostGraphDef_Node_InputInfo::preceding_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.InputInfo.preceding_port)
  return preceding_port_;
}
 void CostGraphDef_Node_InputInfo::set_preceding_port(::google::protobuf::int32 value) {
  
  preceding_port_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.InputInfo.preceding_port)
}

// -------------------------------------------------------------------

// CostGraphDef_Node_OutputInfo

// optional int64 size = 1;
void CostGraphDef_Node_OutputInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CostGraphDef_Node_OutputInfo::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.OutputInfo.size)
  return size_;
}
 void CostGraphDef_Node_OutputInfo::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.OutputInfo.size)
}

// optional int64 alias_input_port = 2;
void CostGraphDef_Node_OutputInfo::clear_alias_input_port() {
  alias_input_port_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CostGraphDef_Node_OutputInfo::alias_input_port() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.OutputInfo.alias_input_port)
  return alias_input_port_;
}
 void CostGraphDef_Node_OutputInfo::set_alias_input_port(::google::protobuf::int64 value) {
  
  alias_input_port_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.OutputInfo.alias_input_port)
}

// -------------------------------------------------------------------

// CostGraphDef_Node

// optional string name = 1;
void CostGraphDef_Node::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CostGraphDef_Node::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CostGraphDef_Node::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.name)
}
 void CostGraphDef_Node::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CostGraphDef.Node.name)
}
 void CostGraphDef_Node::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CostGraphDef.Node.name)
}
 ::std::string* CostGraphDef_Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CostGraphDef.Node.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CostGraphDef_Node::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.CostGraphDef.Node.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CostGraphDef_Node::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CostGraphDef.Node.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CostGraphDef_Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CostGraphDef.Node.name)
}
 void CostGraphDef_Node::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CostGraphDef.Node.name)
}

// optional string device = 2;
void CostGraphDef_Node::clear_device() {
  device_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& CostGraphDef_Node::device() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.device)
  return device_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CostGraphDef_Node::set_device(const ::std::string& value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.device)
}
 void CostGraphDef_Node::set_device(const char* value) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.CostGraphDef.Node.device)
}
 void CostGraphDef_Node::set_device(const char* value,
    size_t size) {
  
  device_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.CostGraphDef.Node.device)
}
 ::std::string* CostGraphDef_Node::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.CostGraphDef.Node.device)
  return device_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CostGraphDef_Node::release_device() {
  // @@protoc_insertion_point(field_release:tensorflow.CostGraphDef.Node.device)
  
  return device_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* CostGraphDef_Node::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.CostGraphDef.Node.device)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return device_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void CostGraphDef_Node::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.CostGraphDef.Node.device)
}
 void CostGraphDef_Node::unsafe_arena_set_allocated_device(
    ::std::string* device) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (device != NULL) {
    
  } else {
    
  }
  device_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      device, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.CostGraphDef.Node.device)
}

// optional int32 id = 3;
void CostGraphDef_Node::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 CostGraphDef_Node::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.id)
  return id_;
}
 void CostGraphDef_Node::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.id)
}

// repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
int CostGraphDef_Node::input_info_size() const {
  return input_info_.size();
}
void CostGraphDef_Node::clear_input_info() {
  input_info_.Clear();
}
const ::tensorflow::CostGraphDef_Node_InputInfo& CostGraphDef_Node::input_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.input_info)
  return input_info_.Get(index);
}
::tensorflow::CostGraphDef_Node_InputInfo* CostGraphDef_Node::mutable_input_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CostGraphDef.Node.input_info)
  return input_info_.Mutable(index);
}
::tensorflow::CostGraphDef_Node_InputInfo* CostGraphDef_Node::add_input_info() {
  // @@protoc_insertion_point(field_add:tensorflow.CostGraphDef.Node.input_info)
  return input_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node_InputInfo >*
CostGraphDef_Node::mutable_input_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CostGraphDef.Node.input_info)
  return &input_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node_InputInfo >&
CostGraphDef_Node::input_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.CostGraphDef.Node.input_info)
  return input_info_;
}

// repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
int CostGraphDef_Node::output_info_size() const {
  return output_info_.size();
}
void CostGraphDef_Node::clear_output_info() {
  output_info_.Clear();
}
const ::tensorflow::CostGraphDef_Node_OutputInfo& CostGraphDef_Node::output_info(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.output_info)
  return output_info_.Get(index);
}
::tensorflow::CostGraphDef_Node_OutputInfo* CostGraphDef_Node::mutable_output_info(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CostGraphDef.Node.output_info)
  return output_info_.Mutable(index);
}
::tensorflow::CostGraphDef_Node_OutputInfo* CostGraphDef_Node::add_output_info() {
  // @@protoc_insertion_point(field_add:tensorflow.CostGraphDef.Node.output_info)
  return output_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node_OutputInfo >*
CostGraphDef_Node::mutable_output_info() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CostGraphDef.Node.output_info)
  return &output_info_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node_OutputInfo >&
CostGraphDef_Node::output_info() const {
  // @@protoc_insertion_point(field_list:tensorflow.CostGraphDef.Node.output_info)
  return output_info_;
}

// optional int64 temporary_memory_size = 6;
void CostGraphDef_Node::clear_temporary_memory_size() {
  temporary_memory_size_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CostGraphDef_Node::temporary_memory_size() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.temporary_memory_size)
  return temporary_memory_size_;
}
 void CostGraphDef_Node::set_temporary_memory_size(::google::protobuf::int64 value) {
  
  temporary_memory_size_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.temporary_memory_size)
}

// optional bool is_final = 7;
void CostGraphDef_Node::clear_is_final() {
  is_final_ = false;
}
 bool CostGraphDef_Node::is_final() const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.is_final)
  return is_final_;
}
 void CostGraphDef_Node::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.is_final)
}

// repeated int32 control_input = 8;
int CostGraphDef_Node::control_input_size() const {
  return control_input_.size();
}
void CostGraphDef_Node::clear_control_input() {
  control_input_.Clear();
}
 ::google::protobuf::int32 CostGraphDef_Node::control_input(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.Node.control_input)
  return control_input_.Get(index);
}
 void CostGraphDef_Node::set_control_input(int index, ::google::protobuf::int32 value) {
  control_input_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.CostGraphDef.Node.control_input)
}
 void CostGraphDef_Node::add_control_input(::google::protobuf::int32 value) {
  control_input_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.CostGraphDef.Node.control_input)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CostGraphDef_Node::control_input() const {
  // @@protoc_insertion_point(field_list:tensorflow.CostGraphDef.Node.control_input)
  return control_input_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CostGraphDef_Node::mutable_control_input() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CostGraphDef.Node.control_input)
  return &control_input_;
}

// -------------------------------------------------------------------

// CostGraphDef

// repeated .tensorflow.CostGraphDef.Node node = 1;
int CostGraphDef::node_size() const {
  return node_.size();
}
void CostGraphDef::clear_node() {
  node_.Clear();
}
const ::tensorflow::CostGraphDef_Node& CostGraphDef::node(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.CostGraphDef.node)
  return node_.Get(index);
}
::tensorflow::CostGraphDef_Node* CostGraphDef::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.CostGraphDef.node)
  return node_.Mutable(index);
}
::tensorflow::CostGraphDef_Node* CostGraphDef::add_node() {
  // @@protoc_insertion_point(field_add:tensorflow.CostGraphDef.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node >*
CostGraphDef::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.CostGraphDef.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::CostGraphDef_Node >&
CostGraphDef::node() const {
  // @@protoc_insertion_point(field_list:tensorflow.CostGraphDef.node)
  return node_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
